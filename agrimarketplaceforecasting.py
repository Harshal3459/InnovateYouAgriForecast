# -*- coding: utf-8 -*-
"""AgriMarketplaceForecasting.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gWCXvyIMvViqv8DRDXCeCFTXt7pkNnqr
"""



from google.colab import drive
import pandas as pd
import numpy as np
drive.mount("/content/drive")
raw_data = pd.read_csv("/content/drive/MyDrive/Min/all_min.csv", index_col = 0)
print(raw_data.head())

import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
raw_data = raw_data[~(raw_data["Minimum Price(Rs./Quintal)"] == "NR")]
raw_data["Minimum Price(Rs./Quintal)"] = raw_data["Minimum Price(Rs./Quintal)"].astype(dtype = np.float64)
raw_data["Minimum Price(Rs./Quintal)"] = raw_data["Minimum Price(Rs./Quintal)"].astype(dtype = np.int64)

def standardize_date(date_str):

  if isinstance(date_str, str):
    if '-' in date_str and len(date_str.split('-')[0]) == 2:
      return pd.to_datetime(date_str, format='%d-%m-%Y')
    return pd.to_datetime(date_str)
  return pd.to_datetime(date_str)

raw_data['Arrival Date'] = raw_data['Arrival Date'].apply(standardize_date)
raw_data = raw_data.sort_values(['Market', 'Variety', 'Arrival Date'])

print(raw_data.describe(include = 'all'))

#raw_data = raw_data["Minimum Price(Rs./Quintal)"].astype(dtype = np.float64)
raw_data = raw_data[~(raw_data["Minimum Price(Rs./Quintal)"] == "NR")]

raw_data["Minimum Price(Rs./Quintal)"] = raw_data["Minimum Price(Rs./Quintal)"].astype(dtype = np.float64)
raw_data["Minimum Price(Rs./Quintal)"] = raw_data["Minimum Price(Rs./Quintal)"].astype(dtype = np.int64)

print(raw_data.describe())

# Sort the data by Market, Variety, and Arrival Date
raw_data = raw_data.sort_values(['Market', 'Variety', 'Arrival Date'])

print(raw_data.head())

raw_data['Year'] = raw_data['Arrival Date'].dt.year
raw_data['Month'] = raw_data['Arrival Date'].dt.month
raw_data['Day'] = raw_data['Arrival Date'].dt.day
raw_data['Quarter'] = raw_data['Arrival Date'].dt.quarter
raw_data['DayOfWeek'] = raw_data['Arrival Date'].dt.dayofweek

for lag in range(1, 4):
    raw_data[f'Lag_{lag}'] = raw_data.groupby(['Market', 'Variety'])['Minimum Price(Rs./Quintal)'].shift(lag)

raw_data = raw_data.dropna()

rolling_windows = {
    'Rolling_Mean_7': 7,
    'Rolling_Mean_14': 14,
    'Rolling_Mean_30': 30,
    'Rolling_Std_7': 7,
    'Rolling_Std_14': 14,
    'Rolling_Std_30': 30,
    'Arrival_Rolling_mean_3': 3
}

for window_name, window_size in rolling_windows.items():
    if 'Mean' in window_name:
        raw_data[window_name] = raw_data.groupby(['Market', 'Variety'])['Minimum Price(Rs./Quintal)'].transform(
            lambda x: x.rolling(window=window_size, min_periods=1).mean()
        )
    elif 'Std' in window_name:
        raw_data[window_name] = raw_data.groupby(['Market', 'Variety'])['Minimum Price(Rs./Quintal)'].transform(
            lambda x: x.rolling(window=window_size, min_periods=1).std()
        )
    else:
        raw_data[window_name] = raw_data.groupby(['Market', 'Variety'])['Arrivals (Tonnes)'].transform(
            lambda x: x.rolling(window=window_size, min_periods=1).mean()
        )

raw_data['Market'] = raw_data['Market'].astype('category')
raw_data['Variety'] = raw_data['Variety'].astype('category')

print(raw_data.describe(include = 'all'))

raw_data.to_csv("/content/drive/MyDrive/EngineeredData.csv")

X = raw_data.drop(columns=['Minimum Price(Rs./Quintal)', 'Arrival Date'])
y = raw_data['Minimum Price(Rs./Quintal)']

from sklearn.model_selection import train_test_split
X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)

import xgboost as xgb

model = xgb.XGBRegressor(
    objective='reg:squarederror',
    n_estimators=100,
    learning_rate=0.1,
    max_depth=5,
    enable_categorical=True
)

model.fit(X_train, y_train)
y_pred_val = model.predict(X_val)
y_pred_train = model.predict(X_train)

from sklearn.metrics import mean_squared_error, mean_absolute_percentage_error, mean_absolute_error
print(mean_absolute_percentage_error(y_val, y_pred_val))
mse = mean_squared_error(y_val, y_pred_val)
print(mean_absolute_error(y_val, y_pred_val))

print(mean_absolute_percentage_error(y_train, y_pred_train))



def predict_future(model, raw_data, n_future_steps, target_market, target_variety):

    historical_data = raw_data[
        (raw_data['Market'] == target_market) &
        (raw_data['Variety'] == target_variety)
    ]


    initial_data = historical_data.iloc[[-1]].drop(columns=['Minimum Price(Rs./Quintal)', 'Arrival Date'])
    initial_data['Market'] = initial_data['Market'].astype('category')
    initial_data['Variety'] = initial_data['Variety'].astype('category')

    historical_prices = historical_data['Minimum Price(Rs./Quintal)']

    predictions = []
    current_data = initial_data.copy()

    rolling_window_7 = historical_prices.tail(7).tolist()
    rolling_window_14 = historical_prices.tail(14).tolist()
    rolling_window_30 = historical_prices.tail(30).tolist()

    rolling_std_window_7 = historical_prices.tail(7).tolist()
    rolling_std_window_14 = historical_prices.tail(14).tolist()
    rolling_std_window_30 = historical_prices.tail(30).tolist()

    arrival_rolling_window_3 = historical_data['Arrivals (Tonnes)'].tail(3).tolist()

    latest_prices = historical_prices.tail(3).tolist()
    current_data['Lag_1'] = latest_prices[-1]
    current_data['Lag_2'] = latest_prices[-2]
    current_data['Lag_3'] = latest_prices[-3]

    for _ in range(n_future_steps):

        next_arrival = np.mean(arrival_rolling_window_3)
        current_data['Arrivals (Tonnes)'] = next_arrival

        arrival_rolling_window_3.append(next_arrival)
        if len(arrival_rolling_window_3) > 3:
            arrival_rolling_window_3.pop(0)
        current_data['Arrival_Rolling_mean_3'] = np.mean(arrival_rolling_window_3)

        next_price = model.predict(current_data)[0]
        predictions.append(next_price)

        current_data['Lag_3'] = current_data['Lag_2']
        current_data['Lag_2'] = current_data['Lag_1']
        current_data['Lag_1'] = next_price

        rolling_window_7.append(next_price)
        rolling_window_14.append(next_price)
        rolling_window_30.append(next_price)

        rolling_std_window_7.append(next_price)
        rolling_std_window_14.append(next_price)
        rolling_std_window_30.append(next_price)

        if len(rolling_window_7) > 7:
            rolling_window_7.pop(0)
        if len(rolling_window_14) > 14:
            rolling_window_14.pop(0)
        if len(rolling_window_30) > 30:
            rolling_window_30.pop(0)

        if len(rolling_std_window_7) > 7:
            rolling_std_window_7.pop(0)
        if len(rolling_std_window_14) > 14:
            rolling_std_window_14.pop(0)
        if len(rolling_std_window_30) > 30:
            rolling_std_window_30.pop(0)

        current_data['Rolling_Mean_7'] = np.mean(rolling_window_7)
        current_data['Rolling_Mean_14'] = np.mean(rolling_window_14)
        current_data['Rolling_Mean_30'] = np.mean(rolling_window_30)

        current_data['Rolling_Std_7'] = np.std(rolling_std_window_7)
        current_data['Rolling_Std_14'] = np.std(rolling_std_window_14)
        current_data['Rolling_Std_30'] = np.std(rolling_std_window_30)

        current_data['Market'] = current_data['Market'].astype('category')
        current_data['Variety'] = current_data['Variety'].astype('category')

    return predictions

n_future_steps = 7
target_market = "Mumbai"
target_variety = "Sugar"

future_predictions = predict_future(model, raw_data, n_future_steps, target_market, target_variety)

print(f'Predicted prices for {target_market} ({target_variety}) for the next {n_future_steps} days:')
print(future_predictions)

import joblib
joblib.dump(model, '/content/drive/MyDrive/aissmspricemodel.pkl')

